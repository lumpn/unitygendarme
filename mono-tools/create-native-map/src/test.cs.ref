/*
 * This file was automatically generated by create-native-map from TestMap.dll.
 *
 * DO NOT MODIFY.
 */

using System;
using System.Runtime.InteropServices;
using Mono.Unix.Native;

namespace Mono.Unix.Native {

	public sealed /* static */ partial class NativeConvert
	{
		private NativeConvert () {}

		private const string LIB = "NativeLib";

		private static void ThrowArgumentException (object value)
		{
			throw new ArgumentOutOfRangeException ("value", value,
				Locale.GetText ("Current platform doesn't support this value."));
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromChild")]
		private static extern int FromChild (Child source, IntPtr destination);

		public static bool TryCopy (Child source, IntPtr destination)
		{
			return FromChild (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToChild")]
		private static extern int ToChild (IntPtr source, Child destination);

		public static bool TryCopy (IntPtr source, Child destination)
		{
			return ToChild (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromFlagsEnum")]
		private static extern int FromFlagsEnum (FlagsEnum value, out Int32 rval);

		public static bool TryFromFlagsEnum (FlagsEnum value, out Int32 rval)
		{
			return FromFlagsEnum (value, out rval) == 0;
		}

		public static Int32 FromFlagsEnum (FlagsEnum value)
		{
			Int32 rval;
			if (FromFlagsEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToFlagsEnum")]
		private static extern int ToFlagsEnum (Int32 value, out FlagsEnum rval);

		public static bool TryToFlagsEnum (Int32 value, out FlagsEnum rval)
		{
			return ToFlagsEnum (value, out rval) == 0;
		}

		public static FlagsEnum ToFlagsEnum (Int32 value)
		{
			FlagsEnum rval;
			if (ToFlagsEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromFoo")]
		private static extern int FromFoo (ref Foo source, IntPtr destination);

		public static bool TryCopy (ref Foo source, IntPtr destination)
		{
			return FromFoo (ref source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToFoo")]
		private static extern int ToFoo (IntPtr source, out Foo destination);

		public static bool TryCopy (IntPtr source, out Foo destination)
		{
			return ToFoo (source, out destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromFooHolder")]
		private static extern int FromFooHolder (ref FooHolder source, IntPtr destination);

		public static bool TryCopy (ref FooHolder source, IntPtr destination)
		{
			return FromFooHolder (ref source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToFooHolder")]
		private static extern int ToFooHolder (IntPtr source, out FooHolder destination);

		public static bool TryCopy (IntPtr source, out FooHolder destination)
		{
			return ToFooHolder (source, out destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromInternalEnum")]
		private static extern int FromInternalEnum (InternalEnum value, out Int64 rval);

		internal static bool TryFromInternalEnum (InternalEnum value, out Int64 rval)
		{
			return FromInternalEnum (value, out rval) == 0;
		}

		internal static Int64 FromInternalEnum (InternalEnum value)
		{
			Int64 rval;
			if (FromInternalEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToInternalEnum")]
		private static extern int ToInternalEnum (Int64 value, out InternalEnum rval);

		internal static bool TryToInternalEnum (Int64 value, out InternalEnum rval)
		{
			return ToInternalEnum (value, out rval) == 0;
		}

		internal static InternalEnum ToInternalEnum (Int64 value)
		{
			InternalEnum rval;
			if (ToInternalEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromParent")]
		private static extern int FromParent (Parent source, IntPtr destination);

		public static bool TryCopy (Parent source, IntPtr destination)
		{
			return FromParent (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToParent")]
		private static extern int ToParent (IntPtr source, Parent destination);

		public static bool TryCopy (IntPtr source, Parent destination)
		{
			return ToParent (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromSimpleFlagsEnum")]
		private static extern int FromSimpleFlagsEnum (SimpleFlagsEnum value, out Int32 rval);

		public static bool TryFromSimpleFlagsEnum (SimpleFlagsEnum value, out Int32 rval)
		{
			return FromSimpleFlagsEnum (value, out rval) == 0;
		}

		public static Int32 FromSimpleFlagsEnum (SimpleFlagsEnum value)
		{
			Int32 rval;
			if (FromSimpleFlagsEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToSimpleFlagsEnum")]
		private static extern int ToSimpleFlagsEnum (Int32 value, out SimpleFlagsEnum rval);

		public static bool TryToSimpleFlagsEnum (Int32 value, out SimpleFlagsEnum rval)
		{
			return ToSimpleFlagsEnum (value, out rval) == 0;
		}

		public static SimpleFlagsEnum ToSimpleFlagsEnum (Int32 value)
		{
			SimpleFlagsEnum rval;
			if (ToSimpleFlagsEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_FromTestEnum")]
		private static extern int FromTestEnum (TestEnum value, out Int64 rval);

		public static bool TryFromTestEnum (TestEnum value, out Int64 rval)
		{
			return FromTestEnum (value, out rval) == 0;
		}

		public static Int64 FromTestEnum (TestEnum value)
		{
			Int64 rval;
			if (FromTestEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Test_ToTestEnum")]
		private static extern int ToTestEnum (Int64 value, out TestEnum rval);

		public static bool TryToTestEnum (Int64 value, out TestEnum rval)
		{
			return ToTestEnum (value, out rval) == 0;
		}

		public static TestEnum ToTestEnum (Int64 value)
		{
			TestEnum rval;
			if (ToTestEnum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Rename_FromColors")]
		private static extern int FromColors (Colors value, out Int32 rval);

		public static bool TryFromColors (Colors value, out Int32 rval)
		{
			return FromColors (value, out rval) == 0;
		}

		public static Int32 FromColors (Colors value)
		{
			Int32 rval;
			if (FromColors (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="MakeMap_Rename_ToColors")]
		private static extern int ToColors (Int32 value, out Colors rval);

		public static bool TryToColors (Int32 value, out Colors rval)
		{
			return ToColors (value, out rval) == 0;
		}

		public static Colors ToColors (Int32 value)
		{
			Colors rval;
			if (ToColors (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

	}
}

